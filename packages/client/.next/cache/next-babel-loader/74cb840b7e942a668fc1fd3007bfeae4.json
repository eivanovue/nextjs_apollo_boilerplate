{"ast":null,"code":"var __jsx = React.createElement;\nimport React from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport Layout from '../components/Layout';\nimport gql from 'graphql-tag';\nimport { withApollo } from '../apollo/apollo';\nconst QUERY = gql`\n  query GetHello {\n    hello\n  }\n`;\n\nconst NOSSR = () => {\n  const {\n    data,\n    loading,\n    error,\n    refetch\n  } = useQuery(QUERY);\n  if (loading) return __jsx(\"p\", null, \"Loading...\");\n  if (error) return __jsx(\"p\", null, \"Error: \", error.message);\n  return __jsx(Layout, null, __jsx(\"h1\", null, \"This should be rendered on client side\"), __jsx(\"pre\", null, \"Data: \", data.hello), __jsx(\"button\", {\n    onClick: () => refetch()\n  }, \"Refetch\"));\n};\n\nexport default withApollo({\n  ssr: false\n})(NOSSR);","map":{"version":3,"sources":["C:/Users/eivanovue/coding/devto-monorepo/packages/client/pages/index.tsx"],"names":["React","useQuery","Layout","gql","withApollo","QUERY","NOSSR","data","loading","error","refetch","message","hello","ssr"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,SAASC,UAAT,QAA2B,kBAA3B;AAEA,MAAMC,KAAK,GAAGF,GAAI;;;;CAAlB;;AAMA,MAAMG,KAAK,GAAG,MAAM;AAClB,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,OAAR;AAAiBC,IAAAA,KAAjB;AAAwBC,IAAAA;AAAxB,MAAoCT,QAAQ,CAACI,KAAD,CAAlD;AAEA,MAAIG,OAAJ,EAAa,OAAO,8BAAP;AACb,MAAIC,KAAJ,EAAW,OAAO,4BAAWA,KAAK,CAACE,OAAjB,CAAP;AAEX,SACE,MAAC,MAAD,QACE,2DADF,EAEE,6BAAYJ,IAAI,CAACK,KAAjB,CAFF,EAGE;AAAQ,IAAA,OAAO,EAAE,MAAMF,OAAO;AAA9B,eAHF,CADF;AAOD,CAbD;;AAeA,eAAeN,UAAU,CAAC;AAAES,EAAAA,GAAG,EAAE;AAAP,CAAD,CAAV,CAA2BP,KAA3B,CAAf","sourcesContent":["import React from 'react';\r\nimport { useQuery } from '@apollo/react-hooks';\r\nimport Layout from '../components/Layout';\r\nimport gql from 'graphql-tag';\r\nimport { withApollo } from '../apollo/apollo';\r\n\r\nconst QUERY = gql`\r\n  query GetHello {\r\n    hello\r\n  }\r\n`;\r\n\r\nconst NOSSR = () => {\r\n  const { data, loading, error, refetch } = useQuery(QUERY);\r\n\r\n  if (loading) return <p>Loading...</p>;\r\n  if (error) return <p>Error: {error.message}</p>;\r\n\r\n  return (\r\n    <Layout>\r\n      <h1>This should be rendered on client side</h1>\r\n      <pre>Data: {data.hello}</pre>\r\n      <button onClick={() => refetch()}>Refetch</button>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default withApollo({ ssr: false })(NOSSR);\r\n"]},"metadata":{},"sourceType":"module"}